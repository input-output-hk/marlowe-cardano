{-
FIXME: This module duplicates some necessary Haskell types from Marlowe.Client. These should
preferably be generated by purescript-bridge with a PSGenerator module created specifically for use
by the Marlowe Run frontend.
-}
module Marlowe.Client where

import Prologue
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<))
import Data.Argonaut.Encode.Aeson as E
import Data.Generic.Rep (class Generic)
import Data.Lens (Lens')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Newtype (class Newtype, unwrap)
import Marlowe.Semantics (MarloweData, MarloweParams, TransactionInput)
import Type.Proxy (Proxy(..))

-- This is the state of the follower contract. Its purpose is to provide us with an up-to-date
-- transaction history for a Marlowe contract running on the blockchain.
newtype ContractHistory
  = ContractHistory
  { chParams :: Maybe (Tuple MarloweParams MarloweData)
  , chHistory :: Array TransactionInput
  }

derive instance newtypeContractHistory :: Newtype ContractHistory _

derive instance eqContractHistory :: Eq ContractHistory

derive instance genericContractHistory :: Generic ContractHistory _

instance encodeJsonContractHistory :: EncodeJson ContractHistory where
  encodeJson =
    E.encode $ unwrap
      >$< E.record
          { chParams: E.maybe E.value :: _ (_ (Tuple MarloweParams MarloweData))
          , chHistory: E.value :: _ (Array TransactionInput)
          }

instance decodeJsonContractHistory :: DecodeJson ContractHistory where
  decodeJson =
    D.decode $ ContractHistory
      <$> D.record "ContractHistory"
          { chParams: D.maybe D.value :: _ (_ (Tuple MarloweParams MarloweData))
          , chHistory: D.value :: _ (Array TransactionInput)
          }

_chParams :: Lens' ContractHistory (Maybe (Tuple MarloweParams MarloweData))
_chParams = _Newtype <<< prop (Proxy :: _ "chParams")

_chHistory :: Lens' ContractHistory (Array TransactionInput)
_chHistory = _Newtype <<< prop (Proxy :: _ "chHistory")
