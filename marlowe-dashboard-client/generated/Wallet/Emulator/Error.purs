-- File auto generated by purescript-bridge! --
module Wallet.Emulator.Error where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Ledger.Index (ValidationError)
import Ledger.Tx.CardanoAPI (ToCardanoError)
import Plutus.V1.Ledger.Crypto (PubKeyHash)
import Type.Proxy (Proxy(Proxy))

data WalletAPIError
  = InsufficientFunds String
  | PrivateKeyNotFound PubKeyHash
  | ValidationError ValidationError
  | ToCardanoError ToCardanoError
  | OtherError String

derive instance eqWalletAPIError :: Eq WalletAPIError

instance showWalletAPIError :: Show WalletAPIError where
  show a = genericShow a

instance encodeJsonWalletAPIError :: EncodeJson WalletAPIError where
  encodeJson = defer \_ -> case _ of
    InsufficientFunds a -> E.encodeTagged "InsufficientFunds" a E.value
    PrivateKeyNotFound a -> E.encodeTagged "PrivateKeyNotFound" a E.value
    ValidationError a -> E.encodeTagged "ValidationError" a E.value
    ToCardanoError a -> E.encodeTagged "ToCardanoError" a E.value
    OtherError a -> E.encodeTagged "OtherError" a E.value

instance decodeJsonWalletAPIError :: DecodeJson WalletAPIError where
  decodeJson = defer \_ -> D.decode
    $ D.sumType "WalletAPIError"
    $ Map.fromFoldable
        [ "InsufficientFunds" /\ D.content (InsufficientFunds <$> D.value)
        , "PrivateKeyNotFound" /\ D.content (PrivateKeyNotFound <$> D.value)
        , "ValidationError" /\ D.content (ValidationError <$> D.value)
        , "ToCardanoError" /\ D.content (ToCardanoError <$> D.value)
        , "OtherError" /\ D.content (OtherError <$> D.value)
        ]

derive instance genericWalletAPIError :: Generic WalletAPIError _

--------------------------------------------------------------------------------

_InsufficientFunds :: Prism' WalletAPIError String
_InsufficientFunds = prism' InsufficientFunds case _ of
  (InsufficientFunds a) -> Just a
  _ -> Nothing

_PrivateKeyNotFound :: Prism' WalletAPIError PubKeyHash
_PrivateKeyNotFound = prism' PrivateKeyNotFound case _ of
  (PrivateKeyNotFound a) -> Just a
  _ -> Nothing

_ValidationError :: Prism' WalletAPIError ValidationError
_ValidationError = prism' ValidationError case _ of
  (ValidationError a) -> Just a
  _ -> Nothing

_ToCardanoError :: Prism' WalletAPIError ToCardanoError
_ToCardanoError = prism' ToCardanoError case _ of
  (ToCardanoError a) -> Just a
  _ -> Nothing

_OtherError :: Prism' WalletAPIError String
_OtherError = prism' OtherError case _ of
  (OtherError a) -> Just a
  _ -> Nothing