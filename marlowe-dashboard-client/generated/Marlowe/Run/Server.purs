-- File auto generated by servant-purescript! --
module Marlowe.Run.Server where

import Prelude

import Affjax.RequestHeader (RequestHeader(..))
import Data.Argonaut (Json, JsonDecodeError)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.Array (catMaybes)
import Data.Either (Either(..))
import Data.Foldable (fold)
import Data.HTTP.Method (Method(..))
import Data.Maybe (Maybe(..))
import Data.Tuple (Tuple)
import Data.WalletId (WalletId)
import Language.Marlowe.Core.V1.Semantics.Types (CurrencySymbol, TokenName)
import Marlowe.Run.Contract.V1.Types (RoleToken)
import Marlowe.Run.Wallet.V1 (GetTotalFundsResponse)
import Marlowe.Run.Wallet.V1.CentralizedTestnet.Types
  ( CreatePostData
  , CreateResponse
  , RestorePostData
  )
import Marlowe.Run.Wallet.V1.Types (WalletInfo)
import Servant.PureScript
  ( class MonadAjax
  , AjaxError
  , flagQueryPairs
  , paramListQueryPairs
  , paramQueryPairs
  , request
  , toHeader
  , toPathSegment
  )
import URI (RelativePart(..), RelativeRef(..))

data Api = Api

getApiVersion
  :: forall m
   . MonadAjax Api m
  => m (Either (AjaxError JsonDecodeError Json) String)
getApiVersion =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "api"
    , "version"
    ]
  query = Nothing

getApiWalletV1ByWalletidTotalfunds
  :: forall m
   . MonadAjax Api m
  => WalletId
  -> m (Either (AjaxError JsonDecodeError Json) GetTotalFundsResponse)
getApiWalletV1ByWalletidTotalfunds wallet_id =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "api"
    , "wallet"
    , "v1"
    , toPathSegment wallet_id
    , "total-funds"
    ]
  query = Nothing

postApiWalletV1CentralizedtestnetRestore
  :: forall m
   . MonadAjax Api m
  => RestorePostData
  -> m (Either (AjaxError JsonDecodeError Json) WalletInfo)
postApiWalletV1CentralizedtestnetRestore reqBody =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left POST
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Just reqBody
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.value
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "api"
    , "wallet"
    , "v1"
    , "centralized-testnet"
    , "restore"
    ]
  query = Nothing

postApiWalletV1CentralizedtestnetCreate
  :: forall m
   . MonadAjax Api m
  => CreatePostData
  -> m (Either (AjaxError JsonDecodeError Json) CreateResponse)
postApiWalletV1CentralizedtestnetCreate reqBody =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left POST
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Just reqBody
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.value
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "api"
    , "wallet"
    , "v1"
    , "centralized-testnet"
    , "create"
    ]
  query = Nothing

getApiContractsV1ByCurrencysymbolRoletokensByTokenname
  :: forall m
   . MonadAjax Api m
  => CurrencySymbol
  -> TokenName
  -> m (Either (AjaxError JsonDecodeError Json) RoleToken)
getApiContractsV1ByCurrencysymbolRoletokensByTokenname
  currency_symbol
  token_name =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "api"
    , "contracts"
    , "v1"
    , toPathSegment currency_symbol
    , "role-tokens"
    , toPathSegment token_name
    ]
  query = Nothing
