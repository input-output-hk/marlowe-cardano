-- File auto generated by purescript-bridge! --
module Marlowe.Run.WebSocket where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))

newtype StreamToClient = ClientMsg Boolean

derive instance Eq StreamToClient

instance Show StreamToClient where
  show a = genericShow a

instance EncodeJson StreamToClient where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson StreamToClient where
  decodeJson = defer \_ -> D.decode $ (ClientMsg <$> D.value)

derive instance Generic StreamToClient _

derive instance Newtype StreamToClient _

--------------------------------------------------------------------------------

_ClientMsg :: Iso' StreamToClient Boolean
_ClientMsg = _Newtype

--------------------------------------------------------------------------------

newtype StreamToServer = ServerMsg Boolean

derive instance Eq StreamToServer

instance Show StreamToServer where
  show a = genericShow a

instance EncodeJson StreamToServer where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson StreamToServer where
  decodeJson = defer \_ -> D.decode $ (ServerMsg <$> D.value)

derive instance Generic StreamToServer _

derive instance Newtype StreamToServer _

--------------------------------------------------------------------------------

_ServerMsg :: Iso' StreamToServer Boolean
_ServerMsg = _Newtype
