-- File auto generated by purescript-bridge! --
module Marlowe.Run.Wallet.V1 where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Plutus.V1.Ledger.Value (Value)
import Type.Proxy (Proxy(Proxy))

newtype GetTotalFundsResponse = GetTotalFundsResponse
  { assets :: Value
  , sync :: Number
  }

derive instance Eq GetTotalFundsResponse

instance Show GetTotalFundsResponse where
  show a = genericShow a

instance EncodeJson GetTotalFundsResponse where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { assets: E.value :: _ Value
        , sync: E.value :: _ Number
        }
    )

instance DecodeJson GetTotalFundsResponse where
  decodeJson = defer \_ -> D.decode $
    ( GetTotalFundsResponse <$> D.record "GetTotalFundsResponse"
        { assets: D.value :: _ Value
        , sync: D.value :: _ Number
        }
    )

derive instance Generic GetTotalFundsResponse _

derive instance Newtype GetTotalFundsResponse _

--------------------------------------------------------------------------------

_GetTotalFundsResponse :: Iso' GetTotalFundsResponse
  { assets :: Value, sync :: Number }
_GetTotalFundsResponse = _Newtype
