-- File auto generated by purescript-bridge! --
module Marlowe.Run.Wallet.V1.CentralizedTestnet.Types where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.Bounded.Generic (genericBottom, genericTop)
import Data.Enum (class Enum)
import Data.Enum.Generic (genericPred, genericSucc)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Data.WalletNickname (WalletNickname)
import Marlowe.Run.Wallet.V1.Types (WalletInfo)
import Type.Proxy (Proxy(Proxy))

newtype CreatePostData = CreatePostData
  { getCreatePassphrase :: String
  , getCreateWalletName :: WalletNickname
  }

derive instance Eq CreatePostData

instance Show CreatePostData where
  show a = genericShow a

instance EncodeJson CreatePostData where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { getCreatePassphrase: E.value :: _ String
        , getCreateWalletName: E.value :: _ WalletNickname
        }
    )

instance DecodeJson CreatePostData where
  decodeJson = defer \_ -> D.decode $
    ( CreatePostData <$> D.record "CreatePostData"
        { getCreatePassphrase: D.value :: _ String
        , getCreateWalletName: D.value :: _ WalletNickname
        }
    )

derive instance Generic CreatePostData _

derive instance Newtype CreatePostData _

--------------------------------------------------------------------------------

_CreatePostData :: Iso' CreatePostData
  { getCreatePassphrase :: String, getCreateWalletName :: WalletNickname }
_CreatePostData = _Newtype

--------------------------------------------------------------------------------

newtype CreateResponse = CreateResponse
  { mnemonic :: Array String
  , walletInfo :: WalletInfo
  }

derive instance Eq CreateResponse

instance Show CreateResponse where
  show a = genericShow a

instance EncodeJson CreateResponse where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { mnemonic: E.value :: _ (Array String)
        , walletInfo: E.value :: _ WalletInfo
        }
    )

instance DecodeJson CreateResponse where
  decodeJson = defer \_ -> D.decode $
    ( CreateResponse <$> D.record "CreateResponse"
        { mnemonic: D.value :: _ (Array String)
        , walletInfo: D.value :: _ WalletInfo
        }
    )

derive instance Generic CreateResponse _

derive instance Newtype CreateResponse _

--------------------------------------------------------------------------------

_CreateResponse :: Iso' CreateResponse
  { mnemonic :: Array String, walletInfo :: WalletInfo }
_CreateResponse = _Newtype

--------------------------------------------------------------------------------

data RestoreError
  = InvalidMnemonic
  | RestoreWalletError
  | FetchPubKeyHashError

derive instance Eq RestoreError

instance Show RestoreError where
  show a = genericShow a

instance EncodeJson RestoreError where
  encodeJson = defer \_ -> E.encode E.enum

instance DecodeJson RestoreError where
  decodeJson = defer \_ -> D.decode D.enum

derive instance Ord RestoreError

derive instance Generic RestoreError _

instance Enum RestoreError where
  succ = genericSucc
  pred = genericPred

instance Bounded RestoreError where
  bottom = genericBottom
  top = genericTop

--------------------------------------------------------------------------------

_InvalidMnemonic :: Prism' RestoreError Unit
_InvalidMnemonic = prism' (const InvalidMnemonic) case _ of
  InvalidMnemonic -> Just unit
  _ -> Nothing

_RestoreWalletError :: Prism' RestoreError Unit
_RestoreWalletError = prism' (const RestoreWalletError) case _ of
  RestoreWalletError -> Just unit
  _ -> Nothing

_FetchPubKeyHashError :: Prism' RestoreError Unit
_FetchPubKeyHashError = prism' (const FetchPubKeyHashError) case _ of
  FetchPubKeyHashError -> Just unit
  _ -> Nothing

--------------------------------------------------------------------------------

newtype RestorePostData = RestorePostData
  { getRestoreMnemonicPhrase :: Array String
  , getRestorePassphrase :: String
  , getRestoreWalletName :: WalletNickname
  }

derive instance Eq RestorePostData

instance Show RestorePostData where
  show a = genericShow a

instance EncodeJson RestorePostData where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { getRestoreMnemonicPhrase: E.value :: _ (Array String)
        , getRestorePassphrase: E.value :: _ String
        , getRestoreWalletName: E.value :: _ WalletNickname
        }
    )

instance DecodeJson RestorePostData where
  decodeJson = defer \_ -> D.decode $
    ( RestorePostData <$> D.record "RestorePostData"
        { getRestoreMnemonicPhrase: D.value :: _ (Array String)
        , getRestorePassphrase: D.value :: _ String
        , getRestoreWalletName: D.value :: _ WalletNickname
        }
    )

derive instance Generic RestorePostData _

derive instance Newtype RestorePostData _

--------------------------------------------------------------------------------

_RestorePostData :: Iso' RestorePostData
  { getRestoreMnemonicPhrase :: Array String
  , getRestorePassphrase :: String
  , getRestoreWalletName :: WalletNickname
  }
_RestorePostData = _Newtype
