-- File auto generated by purescript-bridge! --
module Language.Marlowe.Client.History where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Plutus.V1.Ledger.Tx (TxOutRef)
import Plutus.V1.Ledger.Value (TokenName, Value)
import Type.Proxy (Proxy(Proxy))

newtype RolePayout = RolePayout
  { rolePayoutTxOutRef :: TxOutRef
  , rolePayoutName :: TokenName
  , rolePayoutValue :: Value
  }

derive instance Eq RolePayout

instance Show RolePayout where
  show a = genericShow a

instance EncodeJson RolePayout where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { rolePayoutTxOutRef: E.value :: _ TxOutRef
        , rolePayoutName: E.value :: _ TokenName
        , rolePayoutValue: E.value :: _ Value
        }
    )

instance DecodeJson RolePayout where
  decodeJson = defer \_ -> D.decode $
    ( RolePayout <$> D.record "RolePayout"
        { rolePayoutTxOutRef: D.value :: _ TxOutRef
        , rolePayoutName: D.value :: _ TokenName
        , rolePayoutValue: D.value :: _ Value
        }
    )

derive instance Generic RolePayout _

derive instance Newtype RolePayout _

--------------------------------------------------------------------------------

_RolePayout
  :: Iso' RolePayout
       { rolePayoutTxOutRef :: TxOutRef
       , rolePayoutName :: TokenName
       , rolePayoutValue :: Value
       }
_RolePayout = _Newtype
