-- File auto generated by purescript-bridge! --
module Plutus.PAB.Events.ContractInstanceState where

import Prelude

import Control.Lazy (defer)
import Control.Monad.Freer.Extras.Log (LogMessage)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Core (Json)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Tuple.Nested ((/\))
import Plutus.Contract.Resumable (Request)
import Type.Proxy (Proxy(Proxy))

newtype PartiallyDecodedResponse a = PartiallyDecodedResponse
  { hooks :: Array (Request a)
  , logs :: Array (LogMessage Json)
  , lastLogs :: Array (LogMessage Json)
  , err :: Maybe Json
  , observableState :: Json
  }

derive instance (Eq a) => Eq (PartiallyDecodedResponse a)

instance (EncodeJson a) => EncodeJson (PartiallyDecodedResponse a) where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { hooks: E.value :: _ (Array (Request a))
        , logs: E.value :: _ (Array (LogMessage Json))
        , lastLogs: E.value :: _ (Array (LogMessage Json))
        , err: (E.maybe E.value) :: _ (Maybe Json)
        , observableState: E.value :: _ Json
        }
    )

instance (DecodeJson a) => DecodeJson (PartiallyDecodedResponse a) where
  decodeJson = defer \_ -> D.decode $
    ( PartiallyDecodedResponse <$> D.record "PartiallyDecodedResponse"
        { hooks: D.value :: _ (Array (Request a))
        , logs: D.value :: _ (Array (LogMessage Json))
        , lastLogs: D.value :: _ (Array (LogMessage Json))
        , err: (D.maybe D.value) :: _ (Maybe Json)
        , observableState: D.value :: _ Json
        }
    )

derive instance Generic (PartiallyDecodedResponse a) _

derive instance Newtype (PartiallyDecodedResponse a) _

--------------------------------------------------------------------------------

_PartiallyDecodedResponse
  :: forall a
   . Iso' (PartiallyDecodedResponse a)
       { hooks :: Array (Request a)
       , logs :: Array (LogMessage Json)
       , lastLogs :: Array (LogMessage Json)
       , err :: Maybe Json
       , observableState :: Json
       }
_PartiallyDecodedResponse = _Newtype
