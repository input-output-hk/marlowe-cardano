-- File auto generated by purescript-bridge! --
module Cardano.Wallet.Mock.Types where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Plutus.V1.Ledger.Crypto (PubKeyHash)
import Type.Proxy (Proxy(Proxy))
import Wallet.Emulator.Wallet (Wallet)

newtype WalletInfo = WalletInfo
  { wiWallet :: Wallet
  , wiPubKeyHash :: PubKeyHash
  }

instance showWalletInfo :: Show WalletInfo where
  show a = genericShow a

instance encodeJsonWalletInfo :: EncodeJson WalletInfo where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { wiWallet: E.value :: _ Wallet
        , wiPubKeyHash: E.value :: _ PubKeyHash
        }
    )

instance decodeJsonWalletInfo :: DecodeJson WalletInfo where
  decodeJson = defer \_ -> D.decode $
    ( WalletInfo <$> D.record "WalletInfo"
        { wiWallet: D.value :: _ Wallet
        , wiPubKeyHash: D.value :: _ PubKeyHash
        }
    )

derive instance genericWalletInfo :: Generic WalletInfo _

derive instance newtypeWalletInfo :: Newtype WalletInfo _

--------------------------------------------------------------------------------

_WalletInfo :: Iso' WalletInfo
  { wiWallet :: Wallet, wiPubKeyHash :: PubKeyHash }
_WalletInfo = _Newtype