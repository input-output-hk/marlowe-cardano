name: "Tests"
env:
  CACHE_NAME: cache-nix-store
  ALLOWED_URIS: "https://github.com https://api.github.com"
  TRUSTED_PUBLIC_KEYS: "hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
  SUBSTITUTERS: "https://hydra.iohk.io https://iohk.cachix.org https://cache.nixos.org/"
on:
  push:
    branches-ignore:
      - main # staging
      - production
      - deploy-hernan
      - deploy-pablo
      - shlevy
jobs:
  nix-instantiate:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2
        with:
          path: /nix/store
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
            ${{ runner.os }}-
      - uses: nixbuild/nix-quick-install-action@v8
      - run: nix-instantiate release.nix --arg checkMaterialization true --arg supportedSystems '[ builtins.currentSystem ]' --restrict-eval -I . --allowed-uris '${{ env.ALLOWED_URIS }}' --option trusted-public-keys "${{ env.TRUSTED_PUBLIC_KEYS }}" --option substituters "${{ env.SUBSTITUTERS }}"
  nixpkgsFmt-test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2
        with:
          path: /nix/store
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
            ${{ runner.os }}-
      - uses: nixbuild/nix-quick-install-action@v8
      - run: nix-build -A tests.nixpkgsFmt --arg supportedSystems '[ builtins.currentSystem ]' --restrict-eval -I . --allowed-uris '${{ env.ALLOWED_URIS }}' --option trusted-public-keys "${{ env.TRUSTED_PUBLIC_KEYS }}" --option substituters "${{ env.SUBSTITUTERS }}"
  generated-test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2
        with:
          path: /nix/store
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
            ${{ runner.os }}-
      - uses: nixbuild/nix-quick-install-action@v8
      - run: nix-build -A tests.generated --arg supportedSystems '[ builtins.currentSystem ]' --restrict-eval -I . --allowed-uris '${{ env.ALLOWED_URIS }}' --option trusted-public-keys "${{ env.TRUSTED_PUBLIC_KEYS }}" --option substituters "${{ env.SUBSTITUTERS }}"
  purs-tidy-test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2
        with:
          path: /nix/store
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
            ${{ runner.os }}-
      - uses: nixbuild/nix-quick-install-action@v8
      - run: nix-build -A tests.pursTidy --arg supportedSystems '[ builtins.currentSystem ]' --restrict-eval -I . --allowed-uris '${{ env.ALLOWED_URIS }}' --option trusted-public-keys "${{ env.TRUSTED_PUBLIC_KEYS }}" --option substituters "${{ env.SUBSTITUTERS }}"
  prettier-test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2
        with:
          path: /nix/store
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
            ${{ runner.os }}-
      - uses: nixbuild/nix-quick-install-action@v8
      - run: nix-build -A tests.prettier --arg supportedSystems '[ builtins.currentSystem ]' --restrict-eval -I . --allowed-uris '${{ env.ALLOWED_URIS }}' --option trusted-public-keys "${{ env.TRUSTED_PUBLIC_KEYS }}" --option substituters "${{ env.SUBSTITUTERS }}"
  shellcheck-test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2
        with:
          path: /nix/store
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
            ${{ runner.os }}-
      - uses: nixbuild/nix-quick-install-action@v8
      - run: nix-build -A tests.shellcheck --arg supportedSystems '[ builtins.currentSystem ]' --restrict-eval -I . --allowed-uris '${{ env.ALLOWED_URIS }}' --option trusted-public-keys "${{ env.TRUSTED_PUBLIC_KEYS }}" --option substituters "${{ env.SUBSTITUTERS }}"
  stylish-haskell-test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2
        with:
          path: /nix/store
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
            ${{ runner.os }}-
      - uses: nixbuild/nix-quick-install-action@v8
      - run: nix-build -A tests.stylishHaskell --arg supportedSystems '[ builtins.currentSystem ]' --restrict-eval -I . --allowed-uris '${{ env.ALLOWED_URIS }}' --option trusted-public-keys "${{ env.TRUSTED_PUBLIC_KEYS }}" --option substituters "${{ env.SUBSTITUTERS }}"
  hydra-workaround:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2
        with:
          path: /nix/store
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/*.nix') }}-
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
            ${{ runner.os }}-
      - uses: nixbuild/nix-quick-install-action@v8
      - run: |
          nix-build - -I . --arg supportedSystems '[ builtins.currentSystem ]' --restrict-eval -I . --allowed-uris '${{ env.ALLOWED_URIS }}' --option trusted-public-keys "${{ env.TRUSTED_PUBLIC_KEYS }}" --option substituters "${{ env.SUBSTITUTERS }}" << EOF
          let
            jobs = import ./release.nix { supportedSystems = [ builtins.currentSystem ]; };
            getNestedAttr = set: attrs:
            if attrs == []
              then set
              else getNestedAttr set.\${builtins.head attrs} (builtins.tail attrs);
          in map (job: getNestedAttr jobs (builtins.filter builtins.isString (builtins.split "\\\\." job))) jobs.required.constituents
          EOF
