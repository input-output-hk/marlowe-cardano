-- File auto generated by purescript-bridge! --
module Marlowe.Symbolic.Types.Response where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.BigInt.Argonaut (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Marlowe.Semantics (TransactionInput, TransactionWarning)
import Type.Proxy (Proxy(Proxy))

newtype Response = Response
  { result :: Result
  , durationMs :: BigInt
  }

instance showResponse :: Show Response where
  show a = genericShow a

instance encodeJsonResponse :: EncodeJson Response where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { result: E.value :: _ Result
        , durationMs: E.value :: _ BigInt
        }
    )

instance decodeJsonResponse :: DecodeJson Response where
  decodeJson = defer \_ -> D.decode $
    ( Response <$> D.record "Response"
        { result: D.value :: _ Result
        , durationMs: D.value :: _ BigInt
        }
    )

derive instance genericResponse :: Generic Response _

derive instance newtypeResponse :: Newtype Response _

--------------------------------------------------------------------------------

_Response :: Iso' Response { result :: Result, durationMs :: BigInt }
_Response = _Newtype

--------------------------------------------------------------------------------

data Result
  = Valid
  | CounterExample
      { initialSlot :: BigInt
      , transactionList :: Array TransactionInput
      , transactionWarning :: Array TransactionWarning
      }
  | Error String

instance showResult :: Show Result where
  show a = genericShow a

instance encodeJsonResult :: EncodeJson Result where
  encodeJson = defer \_ -> case _ of
    Valid -> encodeJson { tag: "Valid", contents: jsonNull }
    CounterExample { initialSlot, transactionList, transactionWarning } ->
      encodeJson
        { tag: "CounterExample"
        , initialSlot: flip E.encode initialSlot E.value
        , transactionList: flip E.encode transactionList E.value
        , transactionWarning: flip E.encode transactionWarning E.value
        }
    Error a -> E.encodeTagged "Error" a E.value

instance decodeJsonResult :: DecodeJson Result where
  decodeJson = defer \_ -> D.decode
    $ D.sumType "Result"
    $ Map.fromFoldable
        [ "Valid" /\ pure Valid
        , "CounterExample" /\
            ( CounterExample <$> D.object "CounterExample"
                { initialSlot: D.value :: _ BigInt
                , transactionList: D.value :: _ (Array TransactionInput)
                , transactionWarning: D.value :: _ (Array TransactionWarning)
                }
            )
        , "Error" /\ D.content (Error <$> D.value)
        ]

derive instance genericResult :: Generic Result _

--------------------------------------------------------------------------------

_Valid :: Prism' Result Unit
_Valid = prism' (const Valid) case _ of
  Valid -> Just unit
  _ -> Nothing

_CounterExample :: Prism' Result
  { initialSlot :: BigInt
  , transactionList :: Array TransactionInput
  , transactionWarning :: Array TransactionWarning
  }
_CounterExample = prism' CounterExample case _ of
  (CounterExample a) -> Just a
  _ -> Nothing

_Error :: Prism' Result String
_Error = prism' Error case _ of
  (Error a) -> Just a
  _ -> Nothing