-- File auto generated by purescript-bridge! --
module Webghc.Server where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))

newtype CompileRequest = CompileRequest
  { code :: String
  , implicitPrelude :: Boolean
  }

instance encodeJsonCompileRequest :: EncodeJson CompileRequest where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { code: E.value :: _ String
        , implicitPrelude: E.value :: _ Boolean
        }
    )

instance decodeJsonCompileRequest :: DecodeJson CompileRequest where
  decodeJson = defer \_ -> D.decode $
    ( CompileRequest <$> D.record "CompileRequest"
        { code: D.value :: _ String
        , implicitPrelude: D.value :: _ Boolean
        }
    )

derive instance genericCompileRequest :: Generic CompileRequest _

derive instance newtypeCompileRequest :: Newtype CompileRequest _

--------------------------------------------------------------------------------

_CompileRequest :: Iso' CompileRequest
  { code :: String, implicitPrelude :: Boolean }
_CompileRequest = _Newtype