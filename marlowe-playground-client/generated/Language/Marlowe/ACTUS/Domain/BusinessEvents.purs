-- File auto generated by purescript-bridge! --
module Language.Marlowe.ACTUS.Domain.BusinessEvents where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.Bounded.Generic (genericBottom, genericTop)
import Data.Enum (class Enum)
import Data.Enum.Generic (genericPred, genericSucc)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))

data EventType
  = IED
  | FP
  | PR
  | PD
  | PY
  | PP
  | IP
  | IPFX
  | IPFL
  | IPCI
  | CE
  | RRF
  | RR
  | PRF
  | DV
  | PRD
  | MR
  | TD
  | SC
  | IPCB
  | MD
  | XD
  | STD
  | PI
  | AD

derive instance eqEventType :: Eq EventType

derive instance ordEventType :: Ord EventType

instance showEventType :: Show EventType where
  show a = genericShow a

instance encodeJsonEventType :: EncodeJson EventType where
  encodeJson = defer \_ -> E.encode E.enum

instance decodeJsonEventType :: DecodeJson EventType where
  decodeJson = defer \_ -> D.decode D.enum

derive instance genericEventType :: Generic EventType _

instance enumEventType :: Enum EventType where
  succ = genericSucc
  pred = genericPred

instance boundedEventType :: Bounded EventType where
  bottom = genericBottom
  top = genericTop

--------------------------------------------------------------------------------

_IED :: Prism' EventType Unit
_IED = prism' (const IED) case _ of
  IED -> Just unit
  _ -> Nothing

_FP :: Prism' EventType Unit
_FP = prism' (const FP) case _ of
  FP -> Just unit
  _ -> Nothing

_PR :: Prism' EventType Unit
_PR = prism' (const PR) case _ of
  PR -> Just unit
  _ -> Nothing

_PD :: Prism' EventType Unit
_PD = prism' (const PD) case _ of
  PD -> Just unit
  _ -> Nothing

_PY :: Prism' EventType Unit
_PY = prism' (const PY) case _ of
  PY -> Just unit
  _ -> Nothing

_PP :: Prism' EventType Unit
_PP = prism' (const PP) case _ of
  PP -> Just unit
  _ -> Nothing

_IP :: Prism' EventType Unit
_IP = prism' (const IP) case _ of
  IP -> Just unit
  _ -> Nothing

_IPFX :: Prism' EventType Unit
_IPFX = prism' (const IPFX) case _ of
  IPFX -> Just unit
  _ -> Nothing

_IPFL :: Prism' EventType Unit
_IPFL = prism' (const IPFL) case _ of
  IPFL -> Just unit
  _ -> Nothing

_IPCI :: Prism' EventType Unit
_IPCI = prism' (const IPCI) case _ of
  IPCI -> Just unit
  _ -> Nothing

_CE :: Prism' EventType Unit
_CE = prism' (const CE) case _ of
  CE -> Just unit
  _ -> Nothing

_RRF :: Prism' EventType Unit
_RRF = prism' (const RRF) case _ of
  RRF -> Just unit
  _ -> Nothing

_RR :: Prism' EventType Unit
_RR = prism' (const RR) case _ of
  RR -> Just unit
  _ -> Nothing

_PRF :: Prism' EventType Unit
_PRF = prism' (const PRF) case _ of
  PRF -> Just unit
  _ -> Nothing

_DV :: Prism' EventType Unit
_DV = prism' (const DV) case _ of
  DV -> Just unit
  _ -> Nothing

_PRD :: Prism' EventType Unit
_PRD = prism' (const PRD) case _ of
  PRD -> Just unit
  _ -> Nothing

_MR :: Prism' EventType Unit
_MR = prism' (const MR) case _ of
  MR -> Just unit
  _ -> Nothing

_TD :: Prism' EventType Unit
_TD = prism' (const TD) case _ of
  TD -> Just unit
  _ -> Nothing

_SC :: Prism' EventType Unit
_SC = prism' (const SC) case _ of
  SC -> Just unit
  _ -> Nothing

_IPCB :: Prism' EventType Unit
_IPCB = prism' (const IPCB) case _ of
  IPCB -> Just unit
  _ -> Nothing

_MD :: Prism' EventType Unit
_MD = prism' (const MD) case _ of
  MD -> Just unit
  _ -> Nothing

_XD :: Prism' EventType Unit
_XD = prism' (const XD) case _ of
  XD -> Just unit
  _ -> Nothing

_STD :: Prism' EventType Unit
_STD = prism' (const STD) case _ of
  STD -> Just unit
  _ -> Nothing

_PI :: Prism' EventType Unit
_PI = prism' (const PI) case _ of
  PI -> Just unit
  _ -> Nothing

_AD :: Prism' EventType Unit
_AD = prism' (const AD) case _ of
  AD -> Just unit
  _ -> Nothing